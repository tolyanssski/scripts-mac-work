1. Создай новую сущность ent.AccountPositionSummary. В ней такие поля: AccountID (int, primary key), UserID (uuid), TotalOpenLots (float64). Также дополнительно добавь стандартные поля CreatedAt, UpdatedAt, DeletedAt - все с типом time.Time. На поле UserID поставь в БД простой индекс. Также сгенерируй SQL-скрипт миграции, создающий эту таблицу в Postgresql. Скрипт положи файлом в папку migrations. Также реализуй DTO-объект, аналогичный созданной сущности.

2. Для созданной новой сущности сгенерируй методы репозитория, реализующие типовые CRUD операции. В методах репозитория используй как источник данных в аргументах сам экземпляр сущности. Никаких отдельных payload-структур на входе в update/create методах репозитория быть не должно.

3. В сервисном пакете internal.positions добавь новый интерфейс в качестве зависимости. Назови его Users, сделай метод ResolveUserIDByAccountID(ctx, accountID int) (uuid.UUID, error). Пробрось его как зависимость через конструктор в Positions, но пока сам метод реализовывать не надо (это будет в будущих задачах).

4. В positions.Positions добавь и реализуй приватный метод recalcPositionSummary(ctx, accountID int). В реализации сделай следующее:
 - Сконвретируй accountID в строковую переменную login.
 - В репозитории найди все инстансы сущности ent.Mt5Position, соответсвующие данному значению login по полю Login. Если в репозитории не хватает нужного метода поиска одним запросом, реализуй его.
 - Далее нужно вычислить значение totalOpenLots (float64). Пройдись по всем найденным ent.Mt5Position, возьми у каждой значение поля Volume, сконвертируй его в float64, затем раздели на 10000. Полученные таким образом значения по каждому найденному Mt5Position в сумме и будут составлять нужный результат для totalOpenLots.
 - Теперь проверь, есть ли уже в БД инстанс сущности ent.AccountPositionSummary, попробуй найти его по accountID. Если не найден, то сделай запрос к Users.ResolveUserIDByAccountID чтобы выяснить userID, относящийся к данному аккаунту. После чего создай новый инстанс сущности ent.AccountPositionSummary и заполни его необходимыми полями и сохрани в БД. Если инстанс уже найден, то просто обнови в нем значение поля TotalOpenLots.

5. Добавь пару строк в самый конец метода processMessage. Когда закончилась вся логика обработки сообщения, в конце сделай вызов нового метода recalcPositionSummary для каждого полученного элемента в массиве records, и в качестве accountID подставь поле Login, сконвертированное из строки в int.

6. Добавь новый публичный метод AccountPositionSummary(ctx, accountID), который найдет в репозитории инстанс ent.AccountPositionSummary, и сконвертирует его в dto и вернет.

7. 6. Добавь новый публичный метод AccountPositionSummaryByUser(ctx, userID), который найдет в репозитории массив инстансов ent.AccountPositionSummary по userID, и сконвертирует его в массив dto и вернет.